// tslint:disable
/**
 * Connthass API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Event,
    EventFromJSON,
    EventToJSON,
    Group,
    GroupFromJSON,
    GroupToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface CreateGroupRequest {
    Group: Group;
}

export interface DeleteMemberRequest {
    groupId: number;
    name: string;
}

export interface GetGroupByIdRequest {
    groupId: number;
}

export interface JoinGroupRequest {
    groupId: number;
    Event: Event;
}

/**
 * no description
 */
export class GroupApi extends runtime.BaseAPI {

    /**
     * This can only be done by the logged in user.
     * グループを作成する
     */
    async createGroupRaw(requestParameters: CreateGroupRequest): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.Group === null || requestParameters.Group === undefined) {
            throw new runtime.RequiredError('Group','Required parameter requestParameters.Group was null or undefined when calling createGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters.Group),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * This can only be done by the logged in user.
     * グループを作成する
     */
    async createGroup(requestParameters: CreateGroupRequest): Promise<Group> {
        const response = await this.createGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * メンバーを削除する
     */
    async deleteMemberRaw(requestParameters: DeleteMemberRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deleteMember.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteMember.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/group/{groupId}/member/{name}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * メンバーを削除する
     */
    async deleteMember(requestParameters: DeleteMemberRequest): Promise<void> {
        await this.deleteMemberRaw(requestParameters);
    }

    /**
     * Returns a single group
     * グループ情報を取得する
     */
    async getGroupByIdRaw(requestParameters: GetGroupByIdRequest): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getGroupById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Returns a single group
     * グループ情報を取得する
     */
    async getGroupById(requestParameters: GetGroupByIdRequest): Promise<Group> {
        const response = await this.getGroupByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * memberテーブルにレコードを追加する
     * メンバーを追加する
     */
    async joinGroupRaw(requestParameters: JoinGroupRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling joinGroup.');
        }

        if (requestParameters.Event === null || requestParameters.Event === undefined) {
            throw new runtime.RequiredError('Event','Required parameter requestParameters.Event was null or undefined when calling joinGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/group/{groupId}/member`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventToJSON(requestParameters.Event),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * memberテーブルにレコードを追加する
     * メンバーを追加する
     */
    async joinGroup(requestParameters: JoinGroupRequest): Promise<User> {
        const response = await this.joinGroupRaw(requestParameters);
        return await response.value();
    }

}
