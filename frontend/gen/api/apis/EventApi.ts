// tslint:disable
/**
 * Connthass API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Event,
    EventFromJSON,
    EventToJSON,
} from '../models';

export interface AddEventRequest {
    Event: Event;
}

export interface DeletePetRequest {
    eventId: number;
    api_key?: string;
}

export interface GetEventByIdRequest {
    eventId: number;
}

export interface UpdateEventRequest {
    Event: Event;
}

export interface UpdateEventWithFormRequest {
    eventId: number;
    title?: string;
    description?: string;
    capacity?: string;
}

/**
 * no description
 */
export class EventApi extends runtime.BaseAPI {

    /**
     * イベントを追加する
     */
    async addEventRaw(requestParameters: AddEventRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.Event === null || requestParameters.Event === undefined) {
            throw new runtime.RequiredError('Event','Required parameter requestParameters.Event was null or undefined when calling addEvent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("event_auth", ["write:events", "read:events"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/event`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventToJSON(requestParameters.Event),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * イベントを追加する
     */
    async addEvent(requestParameters: AddEventRequest): Promise<void> {
        await this.addEventRaw(requestParameters);
    }

    /**
     * 特定のイベントを削除する
     */
    async deletePetRaw(requestParameters: DeletePetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling deletePet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.api_key !== undefined && requestParameters.api_key !== null) {
            headerParameters['api_key'] = String(requestParameters.api_key);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("event_auth", ["write:events", "read:events"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/event/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 特定のイベントを削除する
     */
    async deletePet(requestParameters: DeletePetRequest): Promise<void> {
        await this.deletePetRaw(requestParameters);
    }

    /**
     * Returns a single Event
     * IDからイベントを取得する
     */
    async getEventByIdRaw(requestParameters: GetEventByIdRequest): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling getEventById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api_key"] = this.configuration.apiKey("api_key"); // api_key authentication
        }

        const response = await this.request({
            path: `/event/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Returns a single Event
     * IDからイベントを取得する
     */
    async getEventById(requestParameters: GetEventByIdRequest): Promise<Event> {
        const response = await this.getEventByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * 作成済みのイベントを更新する
     */
    async updateEventRaw(requestParameters: UpdateEventRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.Event === null || requestParameters.Event === undefined) {
            throw new runtime.RequiredError('Event','Required parameter requestParameters.Event was null or undefined when calling updateEvent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("event_auth", ["write:events", "read:events"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/event`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventToJSON(requestParameters.Event),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 作成済みのイベントを更新する
     */
    async updateEvent(requestParameters: UpdateEventRequest): Promise<void> {
        await this.updateEventRaw(requestParameters);
    }

    /**
     * 特定のイベントを更新する
     */
    async updateEventWithFormRaw(requestParameters: UpdateEventWithFormRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling updateEventWithForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("event_auth", ["write:events", "read:events"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const formData = new FormData();
        if (requestParameters.title !== undefined) {
            formData.append('title', requestParameters.title as any);
        }

        if (requestParameters.description !== undefined) {
            formData.append('description', requestParameters.description as any);
        }

        if (requestParameters.capacity !== undefined) {
            formData.append('capacity', requestParameters.capacity as any);
        }

        const response = await this.request({
            path: `/event/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formData,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 特定のイベントを更新する
     */
    async updateEventWithForm(requestParameters: UpdateEventWithFormRequest): Promise<void> {
        await this.updateEventWithFormRaw(requestParameters);
    }

}
