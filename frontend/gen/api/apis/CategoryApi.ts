// tslint:disable
/**
 * Connthass API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Category,
    CategoryFromJSON,
    CategoryToJSON,
} from '../models';

export interface AddLikeRequest {
    categoryId: string;
}

export interface CreateCategoryRequest {
    Category: Category;
}

export interface GetCategoryByIdRequest {
    categoryId: number;
}

/**
 * no description
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     * likes関連テーブルにレコードを追加します
     * カテゴリーに「いいね」する
     */
    async addLikeRaw(requestParameters: AddLikeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling addLike.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/category/{categoryId}/like`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * likes関連テーブルにレコードを追加します
     * カテゴリーに「いいね」する
     */
    async addLike(requestParameters: AddLikeRequest): Promise<void> {
        await this.addLikeRaw(requestParameters);
    }

    /**
     * This can only be done by the logged in user.
     * カテゴリを作成する
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.Category === null || requestParameters.Category === undefined) {
            throw new runtime.RequiredError('Category','Required parameter requestParameters.Category was null or undefined when calling createCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/category`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryToJSON(requestParameters.Category),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * This can only be done by the logged in user.
     * カテゴリを作成する
     */
    async createCategory(requestParameters: CreateCategoryRequest): Promise<Category> {
        const response = await this.createCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * カテゴリを一つ返します
     * IDからカテゴリを取得
     */
    async getCategoryByIdRaw(requestParameters: GetCategoryByIdRequest): Promise<runtime.ApiResponse<Category>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling getCategoryById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/category/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFromJSON(jsonValue));
    }

    /**
     * カテゴリを一つ返します
     * IDからカテゴリを取得
     */
    async getCategoryById(requestParameters: GetCategoryByIdRequest): Promise<Category> {
        const response = await this.getCategoryByIdRaw(requestParameters);
        return await response.value();
    }

}
